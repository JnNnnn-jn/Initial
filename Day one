#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
#include<string.h>


//编写一个函数，实现n的k次方，使用递归实现。
double my_secondary(int x, int y)
{
	double total = 0.0;
	if (y > 0)
	{
		total = x * my_secondary(x, y - 1);

		return total;
	}
	else if (y == 0)
		return 1.0;
	else 
		return 1.0 / my_secondary(x, -y);
}
int main()
{
	int n , k;
	printf("请输入n、k的值：");
	scanf("%d %d", &n, &k);
	double  m = my_secondary(n, k);
	printf("%lf\n", m);
	return 0;
}


//写一个递归函数DigitSum(n),输入一个非负整数，返回组成它的数字之和。
//例如：调用DigitSum(1729)，则应该返回1+7+2+9，它的和是19.
//int DigitSum(int z)
//{
//	int num = 0;
//	if (z > 9)
//	{
//		int a = 0;
//		a = z % 10;
//		num = a + DigitSum(z / 10);
//	}
//	else if (z <= 9)
//	{
//		return z;
//	}
//		
//	return num;
//}
//int main()
//{
//	int n = 0;
//	printf("请输入一个非负整数：");
//	scanf("%d", &n);
//	int num = DigitSum(n);
//	printf("%d\n", num);
//	return 0;
//}


//编写一个函数reverse_string(char* string)(递归实现)
// 将参数字符串中的字符反向排列，而不是逆序打印
// 不能使用库函数
// 例：char arr[]="abcdef"
// 逆序之后变成：fedcba
// 两种方法：循环和递归

//                         循环方法
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//void reverse_string(char* str)
//{
//	int left = 0;
//	int right = my_strlen(str) - 1;
//	while (left < right)
//	{
//		char tmp = str[left];
//		str[left] = str[right];//=a;
//		str[right] = tmp;//=f
//		left++;
//		right--;
//	}
//}
//int main()
//{
//	char arr[] = "abcdef";
//	reverse_string(arr);
//	printf("%s\n", arr);
//	return 0; 
//}

//                         递归方法
//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//
//}
//
//void reverse_string(char* str)
//{
//	char tmp = *str;//1
//	int len = my_strlen(str);
//	*str = *(str + len - 1);//2
//	*(str + len - 1) = '\0';//3
//	if (my_strlen(str + 1) >= 2)
//	{
//		reverse_string(str + 1);//4
//	}
//	*(str + len - 1) = tmp;//5
//}
//
//int main()
//{
//	char arr[] = "abcdef";
//	reverse_string(arr);//数组名arr是数组arr首元素的地址
//	printf("%s\n", arr);//fedcba
//	return 0;
//}




//输出9*9乘法口诀表
//1*1=1
//2*1=2 2*2=4
//3*1=3 3*2=6 3*3=9
//……

int main()
{
	int i = 1;
	//用i来控制打印行数
	for (i = 1; i < 10; i++)
	{
		int j = 0;
		for (j = 1; j <= i; j++)//用j来控制每行上的打印个数
		{
			printf("%d*%d=%2d ", i, j, i * j);
		}
		printf("\n");
	}
	return 0;
}

////求十个整数中的最大值
//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int max = arr[0];//0;
//	int i;
//	for (i = 1; i < 10; i++)
//	{
//		if (arr[i] > max)
//			max = arr[i];
//	}
//	printf("%d\n", max);
//	return 0;
//}


//计算1/1-1/2+1/3-1/4……+1/99-1/100的值；
//int main()
//{
//    double  i = 1;
//	int sign = 1;
//	double num2=0;
//	for (i = 1; i <= 100; i++)
//	{
//		num2 = num2 + sign / i;
//		sign = -sign;
//	}
//	printf("%f\n", num2);
//	return 0;
//}

////编写程序，数一下1到100的整数中出现9的次数；
//int main()
//{
//	int i;
//	int count = 0;
//	int num = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		
//		if ((i - 9) % 10 == 0)
//			count++;
//		if (i / 10 == 9)
//			num++;
//
//	}
//	int sum = count + num;
//	printf("%d\n", sum);
//	return 0;
//}


unsigned int Fab(int n)
{
	int num1 = 1, num2 = 1;
	unsigned int i = 1;

	while (n > 2)
	{
		i = num1 + num2;
		num1 = num2;
		num2 = i;
		n--;
	}
	return i;
}

int main()
{
	int n;
	scanf("%d", &n);
	unsigned int ret = Fab(n);

	printf("%u\n", ret);
	return 0;
}

//求第n个斐波那契数
//利用递归可以求出值，但是效率太低！
int count;
//int Fab(int n)
//{
//	if (n == 3)
//		count++;//统计计算机求第三个斐波那契数的次数！
//	if (n <= 2)
//		return 1;
//	else
//		return(Fab(n - 1) + Fab(n - 2));
//}
//int main()
//{
//	int n;
//	scanf("%d", &n);
//	int m = Fab(n);
//	printf("%d\n", m);
//	printf("count=%d\n", count);
//	return 0;
//}


//int is_continue(int z)
//{
//	int i=1;
//	if (z>=1)
//	{
//		i = z * is_continue(z - 1);
//	}
//	return i;
//}
//int main()
//{
//	int n;
//	//n的阶乘：1*2*3*……*n
//	scanf("%d", &n);
//	/*int i=0;
//	int ret = 1;
//	for (i = 1; i <= n; i++)
//	{
//		ret = ret * i;
//	}
//	printf("%d\n", ret);*/
//	is_continue(n);
//	printf("%d\n", is_continue(n));
//	return 0;
//}



int my_strlen(char* str)
{
	/*int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;*/
	//*********************************利用递归
	if (*str != '\0')
		return 1 + my_strlen(str + 1);//如果str的地址所指向的数不为“\0”,既返回“1+my_strlen(str+1)”，
	//此时既再次调用my_strlen函数》》》既递归！
	//str+1指的是str下一个地址！
	else
		return 0;
}
int main()
{ 
	char arr[] = "bit";
	printf("%d\n", my_strlen(arr));
	return 0;
}

//#include<stdio.h>
//
//int main()
//{
//	int a, b;
//	scanf("%d %d", &a, &b);
//	int c = a + b;
//	printf("%d", c);
//	return 0;
//}


//int prime(int z)
//{
//	int n;
//	for (n = 2; n <= z - 1; n++)
//	{
//		if (z % n == 0)
//			return 0;
//	}
//	return 1;
//	
//}
//int main()
//{
//	int a = 100;
//	int c;
//	for (a = 100; a <= 200; a++)
//	{
//		c=prime(a);
//		if (c == 1)
//			printf("%d是质数！\n", a);
//	}
//	return 0;
//}
//#include<math.h>
//int is_prime(int n)
//{
//	for (int m = 2; m < n; m++)
//	for (int m = 2; m <= sqrt(n); m++)
//	{
//		if (n % m == 0)
//			return 0;
//	}
//	return 1;
//}
//int main()
//{
//	求100-200之间的素数
//	int i;
//	int amount = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		if (is_prime(i) == 1)
//		{
//			printf("%d是素数\n", i);
//			amount++;
//		}

		//else printf("%d不是素数\n", i);
//	}
//	printf("有%d个素数\n", amount);
//	return 0;
//}



int prime(int x)
{
	int z;
	for (z = 2; z < x - 1; z++)
	{
		if (x % z == 0)
			return 0;
		else if (x % z != 0)
			return 1;
	}
}
int main()
{
	int n;
	printf("请输入一个大于3的整数：");
	scanf("%d", &n);
	if (prime(n) == 1)
		printf("该数是质数！");
	else if (prime(n) == 0)
		printf("该数不是质数！");
	return 0;
}

//int main()
//{
//	/*int a = 1, b = 1;
//	int c = 0;
//	int n = 3;
//	printf("%d %d", a, b);
//	while (n <= 40)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n++;
//		printf(" %d", c);
//	}*/
//	int f1 = 1, f2 = 1;
//	int n;
//	for (n = 1; n <= 20; n++)
//	{
//		printf("%12d %12d ", f1, f2);
//		if (n % 2 == 0) printf("\n");
//		f1 = f1 + f2;
//		f2 = f1 + f2;
//
//	}
//	return 0;
//}

//int main()
//{
//	int sign = 1;
//	double pi = 0.0, n = 1.0, term = 1.0;
//	while (fabs(term) >= 1e-6)
//	{
//		pi = pi + term;
//		n = n + 2;
//		sign = -sign;
//		term = sign / n;
//	}
//	pi = pi * 4;
//	printf("pi=%10.8f\n", pi);
//	return 0;
//}

//int main()
//{
//	double a = 1.0;
//	double sign = 1.0;
//	double b=1;
//	double pi = 0;
//	int n = 0;
//	while (fabs(b) >= 1e-8)
//	{
//		n++;
//		b = (sign / a);
//		pi = pi + b;
//		a = a + 2;
//		sign = -sign;
//	}
//	pi = pi * 4;
//	printf("%10.8f\n", pi);
//	printf("执行了%d次循环",n);
//	return 0;
//}


//我给你出一个1-1000的数，你来猜这个数。
//二分查找，循环
int main()
{
	printf("我给你出一个1-100的数，你来猜这个数。");
	int a;
	int b = 39;
	printf("\n\n");
	printf("                    ********************\n");
	printf("                    ****\\ 1:play //****\n");
	printf("                    ****\\ 2:exit //****\n");
	printf("                    ********************\n");
	printf("请输入你猜的数：");
	scanf("%d", &a);
	while (39 != a)
	{
		if (a > 39)
		{
			printf("猜大了！请重新输入：");
			scanf("%d", &a);
		}
		else if (a < 39)
		{
			printf("猜小了！请重新输入：");
			scanf("%d", &a);
		}
	}
	printf("恭喜你！猜对了！\n");

	return 0;
}

//将整数1234按顺序打印成1 2 3 4；
//void print(unsigned int n)
//{
//	if (n > 9)
//	{
//		print(n / 10);
//	}
//	printf("%d ", n % 10);
//}
//
//int main()
//{
//	unsigned int num;
//	scanf("%d", &num);
//	//递归-自己调用自己
//	print(num);
//	return 0;
//}


//int Add(int x, int y)
//{
//	int sum = x + y;
//	return sum;
//}
//void amount(int* p)
//{
//	(*p)++;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int n = 0;
//	int total = 0;
//	while (total <= 100)
//	{
//		int Add(int, int);//函数的声明-告知
//		int c = Add(a, b);
//		amount(&n);
//		total = total + c;
//		
//	}
//	printf("%d\n", total);
//	printf("%d\n", n);
//	return 0;
//}

//写一个函数，每调用一次这个函数，就会将num的值增加1。
//
//void Add(int* N)
//{
//	(*N)++;
//}
//int main()
//{
//	int num = 0;
//	while (num <= 10)
//	{
//		Add(&num);
//		printf("%d\n", num);
//	}
//	return 0;
//}


//写一个函数，实现一个整形有序数组的二分查找。******************************************
int binary_search(int a[], int k, int s)
{
	int left = 0;
	int right = s - 1;

	while (left<=right)
	{
		int mid = (right + left) / 2;
		if (a[mid] > k)
		{
			right = mid - 1;
		}
		else if(a[mid]<k)
		{
			left = mid + 1;
		}
		else {
			return mid;
		}
	}
	return -1;
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int key = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int ret = binary_search(arr, key, sz);
	if (-1 == ret)
	{
		printf("找不到\n");
	}
	else
	{
		printf("找到了，下标是%d\n", ret);
	}
	return 0;
}

//写一个函数，每调用一次这个函数，就会将num的值增加1。

//判断2000-3000年哪一年是闰年。（回去写）


//#include<math.h>
//int is_prime(int n)
//{
//	//for (int m = 2; m < n; m++)
//	for(int m=2;m<=sqrt(n);m++)
//	{
//		if (n % m == 0)
//			return 0;
//	}
//	return 1;
//}
//int main()
//{
//	//求100-200之间的素数
//	int i;
//	int amount = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		if (is_prime(i) == 1)
//		{
//			printf("%d是素数\n", i);
//			amount++;
//		}
//		
//		//else printf("%d不是素数\n", i);
//	}
//	printf("有%d个素数\n", amount);
//	return 0;
//}


//运用到了指针
void swap(int* pa, int* pb)
{
	int z = 0;
	z = *pa;
	*pa = *pb;
	*pb = z;
}
int main()
{
	int a = 10;
	int b = 20;
	printf("交换前：a=%d b=%d", a, b);
	swap(&a,&b);
	printf("交换后：a=%d b=%d", a, b);
	return 0;
}

//int main()
//{
//	int a = 10;
//	int* pa = &a;
//	*pa = 20;
//	printf("%d\n", a);
//	return 0;
//}

////写出一个函数，交换两个整型变量的值
////函数返回类型的地方写出：void， 表示这个函数不返回任何值，也不需要返回。
//void swap(int x, int y)
//{
//	int z = 0;
//	z = x;
//	x = y;
//	y = z;
//}//代码写出问题了！并没有实现两个数的交换
//
//int main()
//{
//	int a = 10;
//	int b = 200;
//	printf("交换前：a=%d b=%d\n", a, b);
//	swap(a, b);
//	printf("交换后：a=%d b=%d\n", a, b);
//	return 0;
//}

//int get_max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max = get_max(a, b);
//	printf("较大值max=%d\n", max);
//	return 0;
//}

//int main()
//{
//	char arr1[20] = { 1 };
//	char arr2[] = "hello world!";
//	strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}
//
//int main()
//{
//	char arr[] = "hello world!";
//	memset(arr, 'm', 6);
//	printf("%s", arr);
//	return 0;
//}

//#include<string.h>
//int main()
//{
//	char arr[] = "every programmer should know memset!";
//	memset(arr, 1, 5);
//	puts(memset);
//	return 0;
//}

//int main()
//{
//	printf("i am handsome \0boy!");
//	return 0;
//}


//#include<string.h>
//int main()
//{
//	char arr1[] = "bit";
//	char arr2[20] = "qqqqqqq";
//	strcpy(arr2, arr1);
//	printf("%s\n", arr2);
//	return 0;
//}


//int main()
//{
//	int i, j, n = 0;
//	for (i = 1; i <= 4; i++)
//		for (j = 1; j <= 5; j++, n++)
//		{
//			if (n % 5 == 0) printf("\n");
//			if (i == 3 && j == 1) break;
//			printf("%d\t", i * j);
//		}
//	printf("\n");
//	return 0;
//}


//int main()
//{
//	int i, j, n = 0;
//	for(i=1;i<=4;i++)
//		for (j = 1; j <= 5; j++, n++)
//		{
//			if (n % 5 == 0) printf("\n");
//			printf("%d\t", i * j);
//		}
//	printf("\n");
//	return 0;
//}


//int main()
//{
//	double amount, aver, total=0;
//	int i = 1;
//	do {
//		printf("please enter amount:");
//		scanf("%lf", &amount);
//		total = total + amount;
//		if (total >= 100000) break;
//		i++;
//	} while (i <= 1000);
//	aver = total / i;
//	printf("i=%d\naver=%10.2f\n", i, aver);
//	return 0;
//}


//int main()
//{
//	double amount, aver, total=0;
//	int i=1;
//	while (i<=1000)
//	{
//	    printf("please enter amount:");
//		scanf("%lf", &amount);
//		total = total + amount;
//		if (total >= 100000) break;
//		i++;
//	}
//	aver = total / i;
//	printf("i=%d\naver=%10.2f\n", i, aver);
//	return 0;
//}


//int main()
//{
//	double amount, total, aver;
//	int i;
//	for (i = 1, total = 0; i <= 1000; i++)
//	{
//		printf("please enter amount:");
//		scanf("%lf", &amount);
//		total = total + amount;
//		if (total >= 100000) break;
//
//	}
//	aver = total / i;
//	printf("i=%d\naver=%10.2f\n", i, aver);
//	return 0;
//}


//#define SUM 100000
//int main()
//{
//	float amount, aver, total;
//	int i;
//	for (i = 1, total = 0; i <= 1000; i++)
//	{
//		printf("please enter amount:");
//		scanf("%f", &amount);
//		total = total + amount;
//		if (total >= SUM) break;
//	}
//	aver = total / i;
//	printf("num=%d\naver=%10.2f\n", i, aver);
//	return 0;
//}


#include<math.h>

int main()
{
	int sign = 1;
	double pi = 0.0, n = 1.0, term = 1.0;
	while (fabs(term) >= 1e-6)
	{
		pi = pi + term;
		n = n + 2;
		sign = -sign;
		term = sign / n;
	}
	pi = pi * 4;
	printf("pi=%10.8f\n", pi);
	return 0; 
}


//int sum(int a)
//{
//	int c = 0;
//	static int b = 3;
//	c += 1;
//	b += 2;
//	return(a + b + c);
//}
//
//int main()
//{
//	int i; 
//	int a = 2;
//	for (i = 0; i < 5; i++)
//	{
//		printf("%d\n", sum(a));
//	}
//	return 0;
//}

/*int main()
{
	int i, sum = 0;
	for (i = 1; i <= 100; i++)
		sum = sum + i;
	printf("%d\n", sum);
	return 0;
}*/

//int main()
//{
//	int i, sum = 0;
//	printf("please enter i,i=?");
//	scanf("%d", &i);
//	do {
//		sum = sum + i;
//		i++;
//	} while (i <= 10);
//	printf("sum=%d\n", sum);
//	/*while (i <= 10)
//	{
//		sum = sum + i;
//		i++;
//	}
//	printf("sum=%d\n", sum);*/
//	return 0;
//}

//int main()
//{
//	int i = 1;
//	int sum = 0;
//	/*while (i < 100)
//	{
//		printf("%d\n", i);
//		i++;
//	}*/
//	do {
//		sum = sum + i;
//		i++;
//	}
//			while (i <= 100);
//	printf("%d\n", sum);
//	return 0;
//}


int Max(int a, int b, int c)
{
	if (a > b)
	{
		if (a > c)
			return a;
		else if (c > a)
			return c;
	}
	else if (b > a)
	{
		if (b > c)
			return b;
		else if (c > b)
			return c;
	}
}
int main()
{
	int a, b, c,max;
	printf("请输入三个数：");
	scanf("%d %d %d", &a, &b, &c);
	max=Max(a, b, c);
	printf("最大的数是：%d\n", max);
	return 0;
}


#include<math.h>
int main()
{
	int a, b;
	printf("请输入一个小于1000的数：");
	scanf("%d", &a);
	while (a > 1000)
	{
		printf("输入的数据不符合要求，请重新输入一个小于1000的数：");
		scanf("%d", &a);
		
	}
	b = sqrt(a);
	printf("%d的平方根是%d\n", a, b);

	return 0;
}


//#include<math.h>
//int main()
//{
//	int a;
//	scanf("%d", &a);
//	
//		if (a < 1000)
//		{
//			int b;
//			b = sqrt(a);
//			printf("%d\n", b);
//		}
//		else scanf("%d", &a);
//	
//		return 0;
//}


#include<math.h>
int main()
{
	double a, b, c, disc, x1, x2, p, q;
	scanf("%lf %lf %lf", &a, &b, &c);
	disc = b * b - 4 * a * c;
	if (a == 0)
	{
		x1 = (-c / b);
		x2 = (-c) / b;
		printf("x1=x2=%d\n", x1);
	}
	else if (fabs(disc)<=1e-6)
	{
		x1 = (-b) / 2 * a;
		x2 = (-b) / 2 * a;
		printf("has two equal roots:%8.4f\n", x1);
	}
	else if (disc > 1e-6)
	{
		x1 = (-b + sqrt(disc)) / 2 * a;
		x2 = (-b - sqrt(disc)) / 2 * a;
		printf("has distinct real roots:%8.4f %8.4f\n", x1, x2);
	}
	else {
		p = (-b) / 2 * a;
		q = sqrt(-disc) / 2 * a;
		printf("has complex roots:\n");
		printf("%8.4f+%8.4fi\n", p, q);
		printf("%8.4f-%8.4fi\n", p, q);
	}
	return 0;
}


//int main()
//{
//	int year;
//	printf("enter year:");
//	scanf("%d", &year);
//	if(year%4==0)
//	{
//		if (year % 100!=0)
//		{
//			printf("该年是闰年！");
//		}
//		else if (year % 100 == 0)
//		{
//			if (year % 400 == 0)
//				printf("该年是闰年！");
//			else printf("该年不是闰年！");
//		}
//	}
//	else printf("该年不是闰年！");
//	return 0;
//}

int main()
{
	char grade;
	scanf("%c",&grade);
	printf("Your score:");
	switch (grade)
	{
	case'A':printf("85～100\n"); break;
	case'B':printf("70～84\n"); break;
	case'C':printf("60～69\n"); break;
	case'D':printf("<60\n"); break;
	default:printf("enter data error!\n");
	}
	return 0;
}

int main()
{
	int num1, num2;
	scanf("%d %d", &num1,&num2);
	if (num1 > num2)
		printf("%d %d\n", num2, num1);
	else
		printf("%d %d\n", num1, num2);
		
	return 0;
}

//#include<math.h>
//int main()
//{
//	double a, b, c, disc, p, q,x1,x2;
//	scanf("%lf %lf %lf", &a, &b, &c);
//	disc = b * b - 4 * a * c;
//	if(disc>=0)
//	{
//		p = -b / (2 * a);
//		q = sqrt(disc) / (2 * a);
//		x1 = p + q;
//		x2 = p - q;
//		printf("x1=%lf\nx2=%lf", x1, x2);
//	}
//	else
//		printf("该函数无实根！");
//
//	return 0;
//}

//#include<math.h>
//int main()    
//{
//	double a, b, c, disc;
//	scanf("%lf %lf %lf", &a, &b, &c);
//	disc = b * b - 4 * a * c;
//	if (disc < 0)
//		printf("00");
//	else
//	    {double p, q, x1, x2;
//		p = sqrt(disc) /( 2.0 * a);
//		q = -b /( 2.0 * a);
//		x1 = p + q;
//		x2 = q - p;
//		printf("x1=%lf\n", x1);
//		printf("x2=%lf\n", x2);
//	}
//	return 0;
//}

//int main()
//{
//	double num = 1.5;
//	double* base = &num;
//	*base = 5;
//	printf("%lf\n", num);
//	printf("%p\n", base);
//	printf("%d\n", sizeof(base));
//	return 0;
//}

//int main()
//{
//	char ch = 'a';
//	char* pc = &ch;
//	printf("%p\n", pc);
//	printf("%c\n", ch);
//	return 0;
//}
//

//int main()
//{
//	int a = 10;
//	int b = 0;
//	int* p = &a;//&--取地址符号
//	/*printf("%p\n", p);
//	printf("%p\n", &a);*/
//	b=*p;//*--解引用操作符
//	printf("b = %d", b);
//	//变量用来存放地址的——指针变量（int*）
//	//printf("%p", &a); 
//	return 0;
//}
//求最大值：1、if-else  2、定义函数  3、宏

//#include<stdio.h>
//int Max(int x, int y)
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//#define Max(x,y) (x>y?x:y);
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int max;
//	scanf("%d %d", &a, &b);
//	max = Max(a,b);
//	printf("较大值是max=%d", max);
//	return 0;
//}

//int main()
//{
//	int a = 100;
//	int b = 209;
//	int max = 0;
//	max = (a > b ? a : b);
//	printf("max=%d\n", max);
//	return 0;
//}
 
//int main()
//{
//	int a = 10;
//	int b;
//	//b = a++;//后置++，先使用，后++
//	b = ++a;//前置++，先++，再使用
//	printf("a=%d\nb=%d\n", a, b);
//	return 0;
//}
/*int Max(int x,int y)
{
	if (x > y)
		return x;
	else
		return y;
}
int main()
{
	int a = 0;
	int b = 0;
	int max = 0;
	scanf("%d %d", &a, &b);
	max = Max(a,b);
	printf("较大的数是%d\n",max);
	return 0;
}*/

//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = a + b;
//	
//	scanf("%d %d", &a, &b);
//	c = a + b;
//	printf("c=%d", c);
//	return 0;
//}


//enum Sex
//{
//	MALE,
//	FEMALE
//};
////MALE/FEMALE - 枚举常量
//int main()
//{
//	//enum Sex s = MALE 
//	printf("%d\n",MALE); //得到的值为0.
//	printf("%d\n",FEMALE);//得到的值为1.
//	
//	return 0;
//}


//#define  _CRT_SECURE_NO_WARNINGS 1
//#include<stdio.h>

//int Max(int x,int y)
//{
//	if(x>y)
//		return x;
//	else
//		return y;
//}
//int main()
//{
//	int a,b,max;
//	max=Max(a,b);
//	printf("较大的数是%d\n",max);
//	return 0;
//}

//int main()
//{
//	int sz=0;
//	int arr[10]={0};//10个整型元素的数组
//	printf("%d\n",sizeof(arr));//计算数组的大小
//	sz = sizeof(arr)/sizeof(arr[0]);
//	//计算数组元素个数
//	//个数 = 数组总大小 / 每个元素的大小
//	printf("%d\n",sizeof(arr[0]));
//	printf("sz=%d\n",sz); 
//	return 0;
//}

//int main()
//{
//	
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};//定义一个存放10个整数数字的数组
//	int i=0;
//	while(i<10)
//	{
//		printf("%d\n",arr[i]);
//		i++;
//	}
//	//printf("%d\n",arr[4]);//下标的方式访问元素
//	//arr[下标]；
//	//char ch[20];//定义字符
//	//float arr2[5];// 
//	return 0;
//}

//数组--要存储1-10的数字，怎么存储？
//数组的定义：一组相同类型元素的集合


//                                自定义函数-自己创造的函数
//库函数-C语言本身提供的函数
//int Add(int x,int y)//定义Add函数   
//{
//	int z=x+y;
//	return z;
//}//---{}内为函数体
//
////int main()
//{
//	int a,b,sum,sum1,sum2;
//	scanf("%d %d",&a,&b);
//	sum=Add(a,b);
//	sum1=Add(5,6);
//	sum2=Add(99,63);
//	printf("sum=%d\n",sum);
//	printf("sum=%d\n",sum1);
//	printf("sum=%d\n",sum2);
//
//	return 0;
//	/*int a,b,c;
//	scanf("%d %d",&a,&b);
//	c=a+b;
//	printf("c=%d",c);
//	return 0;*/
//}

//int main()
//{
//	int line = 0;
//	printf("在大学\n");
//	while(line<20000)
//	{
//		printf("敲一行代码*%d\n",line);
//		line++;
//	}
//	if(line>=20000)
//	    printf("你将年薪30w\n");
//	return 0;
//}
//有while循环、for循环、do...while循环
//循环语句！！！

//int main()
//{
//	int input = 0;
//	printf("进入大学\n");
//	printf("你要好好学习吗？（1/0）>:");
//	scanf("%d",&input);
//	if(input==1)
//		printf("你会获得一个好offer\n");
//	else
//		printf("等着搬砖！\n");
//	return 0;
//}

//选择语句！！！！


//#include<string.h>//需要使用到strlen函数，既引用头文件<string.h>
//
////int main()
////{
////	printf("%d\n",strlen("c:\test\32\test.c"));//输出结果为13.原因是：\t和\32是属于一个字符。
////	//  \32--32是2个八进制数字
////	return 0;
////}


//
//int main()
//{
//	printf("%s\n","\"");
//	return 0;
//}

//int main()
//{
//	char arr1[]="abc";
//	char arr2[]={'a','b','c'};
//	printf("%d\n",strlen(arr1));//strlen--string length 计算字符串长度
//    printf("%d\n",strlen(arr2));
//	return 0;
//}



//int main()
//{
//	char arr1[]="abc";//数组
//	//"abc"--'a','b','c','/0'--/0字符串结束的标志
//	char arr2[]={'a','b','c',0};//改为{'a','b','c',0}既正常输出
//	printf("%s\n",arr1);
//	printf("%s\n",arr2);
//
//	return 0;
//}




//3、枚举常量
//枚举：一一列举

//例：性别：男 女
//    三原色：红 黄 蓝

//枚举关键 - enum
//
//enum Sex
//{
//	MALE,
//	FEMALE
//};
////MALE/FEMALE - 枚举常量
//int main()
//{
//	//enum Sex s = MALE 
//	printf("%d\n",MALE); //得到的值为0.
//	printf("%d\n",FEMALE);//得到的值为1.
//	
//	return 0;
//}
//enum Color
//{
//	RED,
//	YELLOW,
//	BLUE
//};
//int main ()
//{
//	enum Color color = BLUE;
//	printf("%d\n",color);
//
//	return 0;
//}


///2、/#define 定义的标识符常量
//#define MAX 10
//
//int main ()
//{
//	int arr[MAX] = {0};
//	printf("%d\n",MAX);
//	return 0;
//}


//1、int main()
//{
//	//const - 常变量
//	const int n = 10;
//	//int arr[10]={0}; //输入一个十个都是0的数。
//	n = 20;//到这一步时会报错，原因是n被const限制，成为常变量，无法改变数值。
//	/*int a,b,c;
//	
//	scanf("%d %d",&a,&b);
//	
//	c=a+b;
//
//	printf("c=%d\n",c);
//*/
//	return 0;
//
//}
